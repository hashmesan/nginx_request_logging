input {  
  beats {
    # The port to listen on for filebeat connections.
    port => 5000
    # The IP address to listen for filebeat connections.
    host => "0.0.0.0"
  }
}
filter {
   grok {
      match => { "message" => "(?:%{IPORHOST:client_ip}|) - (?:%{DATA:auth}|) \[%{HTTPDATE:timestamp}\] \"%{WORD:verb} %{URIPATHPARAM:request} HTTP/%{NUMBER:httpversion}\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) \"(?:%{URI:referrer}|)\" \"%{DATA:client_agent}\" \"(?:%{DATA:cookie}|-)\" \"(?:%{DATA:sec}|-)\" \"%{GREEDYDATA:request_body}\"" }
   }

   useragent {
     source => "client_agent"
     target => "client_agent_p"
   }

   geoip {
         source => "client_ip"
         target => "geoip"
         fields => ["country_name", "country_code3", "region_name", "location"]
   } 

   mutate {
    gsub => ["request_body", "\\n", "",
            "request_body", "\\\"", '"']
    remove_field => ["log.file.path"]

  } 

# JSON proves to be unreliable due to mixed types in rpc.params
#  json {
#    source => "request_body"
#    target => "request_json"
#    skip_on_invalid_json => true
#  }

  grok {
    match => { "request_body" => "method\":\"%{WORD:rpcmethod}\"" }
  }

#  mutate {
#    remove_field => ["request_json.params"]
#  }

  if [response] != "200" {
    drop {}
  }
  if [request_body] =~ /eth_blockNumber|eth_chainId|eth_getBlockByNumber/ {
    drop { }
  }

}
output {
  if "_grokparsefailure" in [tags] {
    # write events that didn't match to a file
    file { "path" => "/tmp/grok_failures.txt" }
  } else {
    #stdout { codec => rubydebug }
  }
  elasticsearch {
      hosts => [ "elasticsearch:9200" ]
#      cacert => '/etc/logstash/http_ca.crt'
      index => "audit_logs"
      id => "audit_pipeline_id"
  }  
}
